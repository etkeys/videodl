name: For LAN Deploy

on:
  push:
    branches:
      - 'ci-test'
  workflow_dispatch:

permissions:
  contents: read

env:
  LS_CMD: "ls -lagG --group-directories-first"

jobs:
  deploy-core:
    name: Core Deploy
    runs-on: ubuntu-24.04
    outputs:
      app-version: ${{ steps.assemble-app-version.outputs.APP_VERSION }}
      build-date: ${{ steps.assemble-app-version.outputs.BUILD_DATE }}
      tar-name: ${{ steps.assemble-app-version.outputs.TAR_NAME }}
    steps:
      - name: Store itermediate build variables
        run: |
          echo ${{ github.run_number }} | awk '{printf("%s%04d\n", "BUILD_NUMBER=", $0)}' >> $GITHUB_ENV
          echo ${{ github.sha }} | awk '{printf("%s%s\n", "COMMIT=", substr($0, 1, 10))}' >> $GITHUB_ENV

      - name: Assemble app version
        id: assemble-app-version
        run: |
          APP_VERSION="${BUILD_NUMBER}+${COMMIT}+lan-deployment"
          echo "APP_VERSION=${APP_VERSION}" >> $GITHUB_OUTPUT
          echo "BUILD_DATE=$(TZ="America/New_York" date +"%F %r")" >> $GITHUB_OUTPUT
          echo "TAR_NAME=videodl.${APP_VERSION}.tar.gz" >> $GITHUB_OUTPUT

  deploy-for-lan:
    name: Package/Deploy for LAN
    runs-on: ubuntu-24.04
    needs: [deploy-core]
    environment: LAN deployment
    env:
      APP_VERSION: ${{ needs.deploy-core.outputs.app-version }}
      BUILD_DATE: ${{ needs.deploy-core.outputs.build-date }}
      TAR_NAME: ${{ needs.deploy-core.outputs.tar-name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Configure docker files
        run: |
          cd postgres
          ${{ env.LS_CMD }}
          mv --verbose .env-release .env
          mv --verbose videodl_postgres.env-release videodl_postgres.env
          sed -i 's/{{ CI_DB_PASSWORD }}/${{ secrets.DB_PASSWORD }}/' videodl_postgres.env
          ${{ env.LS_CMD }}

      - name: Configure systemd files
        run: |
          cd systemd
          ${{ env.LS_CMD }}
          sed -i 's;{{ REMOTE_APP_DIR }};${{ vars.REMOTE_APP_DIR }};g' videodl_worker.service
          sed -i 's;{{ REMOTE_APP_DIR }};${{ vars.REMOTE_APP_DIR }};g' videodl.service
          sed -i 's;{{ REMOTE_WSGI_BIND_ADDRESS }};${{ vars.REMOTE_WSGI_BIND_ADDRESS }};' videodl.service
          ${{ env.LS_CMD }}

      - name: Configure app files
        run: |
          cd src
          ${{ env.LS_CMD }}
          rm --verbose init_db_dev.sh
          rm --verbose seed_db_dev.py
          mv --verbose .env-release .env
          ${{ env.LS_CMD }}
          sed -i 's/{{ CI_APP_SECRET_KEY }}/${{ secrets.APP_SECRET_KEY }}/' .env
          sed -i 's/{{ CI_DB_PASSWORD }}/${{ secrets.DB_PASSWORD }}/' .env
          sed -i 's/{{ CI_DB_USER }}/${{ secrets.DB_USER }}/' .env
          sed -i 's;{{ CI_REMOTE_APP_DIR }};${{ vars.REMOTE_APP_DIR }};' .env

      - name: Inject version
        run: |
          cd src/App/static
          sed -i 's/{{ last_updated_string }}/${{ env.BUILD_DATE }}/' about.md
          sed -i 's/{{ version_string }}/${{ env.APP_VERSION }}/' about.md

      - name: Package files
        run: |
          tar --create --file "${{ env.TAR_NAME }}" --auto-compress --verbose postgres src systemd requirements.txt
          ${{ env.LS_CMD}} *.tar.gz

      - name: rsync deployment
        uses: burnett01/rsync-deployments@7.0.1
        with:
          switches: -iv
          path: ${{ env.TAR_NAME }}
          remote_path: .
          remote_host: ${{ secrets.DEPLOY_REMOTE_HOST }}
          remote_user: github
          remote_key: ${{ secrets.DEPLOY_KEY }}
