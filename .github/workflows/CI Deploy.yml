name: CI Deploy

on:
  push:
    branches:
      - 'testing/*'
  release:
    types: [released]

permissions:
  contents: read

env:
  BASE_APP_VERSION: ${{ github.event_name == 'release' && github.event.release.tag_name || github.ref_name}}
  BUILD_TYPE: ${{ github.event_name == 'release' && 'release' || 'testing' }}
  LS_CMD: "ls -lagG --group-directories-first"

jobs:
  deploy-core:
    name: Core Deploy
    runs-on: ubuntu-22.04
    outputs:
      app-version: ${{ steps.assembly-app-version.outputs.APP_VERSION }}
      build-date: ${{ steps.other-build-variables.outputs.BUILD_DATE }}
    steps:
      - name: Store other build variables
        id: other-build-variables
        run: |
          echo "BUILD_DATE=$(TZ="America/New_York" date +"%F %r")" >> $GITHUB_OUTPUT
          echo ${{ github.run_number }} | awk '{printf("%s%04d\n", "BUILD_NUMBER=", $0)}' >> $GITHUB_ENV
          echo ${{ github.sha }} | awk '{printf("%s%s\n", "COMMIT=", substr($0, 1, 10))}' >> $GITHUB_ENV

      - name: Store core app version
        if: ${{ env.BUILD_TYPE == 'testing' }}
        run: echo ${{ env.BASE_APP_VERSION }} | awk '{split($0, a, "/"); print "CORE_APP_VERSION="a[2]}' >> $GITHUB_ENV

      - name: Assembly app version
        id: assembly-app-version
        run: |
          APP_VERSION="${CORE_APP_VERSION}-${BUILD_NUMBER}"
          if [ "${BUILD_TYPE}" == 'testing' ]; then
              APP_VERSION="${APP_VERSION}.prerelease"
          fi
          APP_VERSION="${APP_VERSION}+${COMMIT}"
          echo "APP_VERSION=${APP_VERSION}" >> $GITHUB_OUTPUT

  deploy-testing:
    name: Deploy to Testing environment
    if: ${{ startsWith(github.ref_name, 'testing/') }}
    runs-on: ubuntu-22.04
    needs: [deploy-core]
    environment: Testing
    env:
      APP_VERSION: ${{ needs.deploy-core.outputs.app-version}}
      BUILD_DATE: ${{ needs.deploy-core.outputs.build-date }}
      ZIP_PACKAGE_NAME: ${{ needs.deploy-core.outputs.app-version }}.tar.gz
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Setup python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Setup python virtual environment
        run: |
          pip install --upgrade pip
          python3.10 -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt

      - name: Configure docker files
        run: |
          cd postgres
          ${{ env.LS_CMD }}
          rm --verbose .env-release videodl_postgres.env-release
          mv --verbose .env-testing .env
          mv --verbose videodl_postgres.env-testing videodl_postgres.env
          ${{ env.LS_CMD }}

      - name: Configure systemd files
        run: |
          cd systemd
          ${{ env.LS_CMD }}
          sed -i 's;{{ REMOTE_APP_DIR }};${{ vars.REMOTE_APP_DIR }};g' videodl_worker.service
          sed -i 's;{{ REMOTE_APP_DIR }};${{ vars.REMOTE_APP_DIR }};g' videodl.service
          sed -i 's;{{ REMOTE_WSGI_BIND_ADDRESS }};${{ vars.REMOTE_WSGI_BIND_ADDRESS }};' videodl.service
          mv --verbose videodl_worker.service videodl_worker-testing.service
          mv --verbose videodl.service videodl-testing.service
          ${{ env.LS_CMD }}

      - name: Configure app files
        run: |
          cd src
          ${{ env.LS_CMD }}
          rm --verbose init_db_dev.sh
          rm --verbose seed_db_dev.py
          rm --verbose .env-release
          mv --verbose .env-testing .env
          ${{ env.LS_CMD }}
          sed -i 's/{{ CI_APP_SECRET_KEY }}/${{ secrets.APP_SECRET_KEY }}/' .env
          sed -i 's/{{ CI_DB_PASSWORD }}/${{ secrets.DB_PASSWORD }}/' .env
          sed -i 's/{{ CI_DB_USER }}/${{ secrets.DB_USER }}/' .env

      - name: Inject version info
        run: |
          cd src/App/static
          sed -i 's/{{ last_updated_string }}/${{ env.BUILD_DATE }}/' about.md
          sed -i 's/{{ version_string }}/${{ env.APP_VERSION }}/' about.md

      - name: Package files
        run: |
          tar --create --file "${{ env.ZIP_PACKAGE_NAME }}" --auto-compress --verbose venv postgres src systemd
          ${{ env.LS_CMD}} *.tar.gz

      - name: rsync deployment
        uses: burnett01/rsync-deployments@7.0.1
        with:
          switches: -iv
          path: ${{ env.ZIP_PACKAGE_NAME }}
          remote_path: .
          remote_host: ${{ secrets.DEPLOY_REMOTE_HOST }}
          remote_user: github
          remote_key: ${{ secrets.DEPLOY_KEY }}
